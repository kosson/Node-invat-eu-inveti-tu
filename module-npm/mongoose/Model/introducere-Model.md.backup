# Introducere Model

Este principala clasă prin care se realizează interacțiunea cu MongoDB. Un model este un constructor compilat din definițiile schemei. Modelele sunt cele care sunt responsabile cu citirea și crearea documentelor din baza de date.

Instanțierea unui `Model` se numește `Document`. Documentele mogoose sunt o reprezentare unu-la-unu a celui din baza de date. Clasele `Document` și `Model` sunt diferite, `Model` fiind o subclasă a lui `Document`. Atunci când încarci documente din MongoDB folosind metode precum `findOne()`, ceea ce obții este un document Mongoose.

```javascript
const doc = await MyModel.findOne();

doc instanceof MyModel; // true
doc instanceof mongoose.Model; // true
doc instanceof mongoose.Document; // true
```

Constructorul `Model()` nu trebuie folosit în mod direct. Există un lucru important care trebuie înțeles în acest context. Ceea ce numim `Model` creat de noi în Mongoose, de fapt sunt subclasele clasei `mongoose.Model`.

Funcțiile `mongoose.model()` și `connection.model()` creează subclase ale lui `mongoose.Model`.

```javascript
// `UserModel` este un "Model", adică o subclasă a lui `mongoose.Model`.
const UserModel = mongoose.model('User', new Schema({ name: String }));

// Pentru a crea documente noi, instanțiezi un model cu `new`:
const userDoc = new UserModel({ name: 'Foo' });
await userDoc.save(); // poți să-l salvezi după

// Poți folosi un model pentru a crea interogări în baza de date:
const userFromDb = await UserModel.findOne({ name: 'Foo' });
```

Atunci când aplici metoda `mongoose.model()` pe o anumită schemă, ceea ce se petrece este compilarea modelului în baza definițiilor din schemă. Numele ales pentru modelul creat va fi, de fapt, numele unei subclase a clasei `mongoose.Model`. Tot același nume va fi și numele colecției pentru care ai creat modelul. Mongoose va crea sau va căuta colecția care va fi echivalentul numelui modelului dar cu toate caracterele mici adăugându-i desinență de plural. De exemplu, pentru numele modelului `User`, colecția căutată sau creată va fi `users`.

```javascript
const UserModel = mongoose.model('User', new Schema({ name: String }));
```
Un lucru interesant de menționat este că metoda `model()` va face o copie a schemei cu tot ce are defini aceasta, inclusiv hook-urile și abia după aceea va apela `model()`.

## Metode statice și pentru modelul hidratat

În Mongoose ai două tipuri de metode care diferă. Unele se pot aplica pe model direct înainte ca acesta să fi fost hidratat cu date precum în cazul unui `find()`, de exemplu. Celelalte sunt metode care se pot aplica după hidratarea cu date.

Pentru a defini metode [statice](https://mongoosejs.com/docs/guide.html#statics) se pot aborda două căi. Fie adaugi o proprietate (funcție) la `schema.statics`, fie adaugi o proprietate direct pe obiectul `Schema` definit. Proprietățile statice nu trebuie definite folosite funcțiile săgeată.

```javascript
// Introdu o funcție drept proprietate obiectului "statics" pentru animalSchema
animalSchema.statics.findByName = function(name) {
  return this.find({ name: new RegExp(name, 'i') });
};
// sau poți apela direct pe obiectul Schema metoda: `animalSchema.static()`.
animalSchema.static('findByBreed', function(breed) {
  return this.find({ breed });
});

const Animal = mongoose.model('Animal', animalSchema);
let animals = await Animal.findByName('fido');
animals = animals.concat(await Animal.findByBreed('Poodle'));
```

## Crearea unui document

Adu-ți mereu aminte faptul că instanța unui model este un document Mongoose. Poți crea documente și apoi salva în baza de date.

```javascript
const Processor = mongoose.model('Processor', schemaProcessor);

const familie = new Processor({ nume: 'Razor' });

familie.save(function (err) {
  if (err) return handleError(err);
  // cod rulat după ce a fost salvat!
});

// sau

Processor.create({ nume: 'Razor' }, function (err, familie) {
  if (err) return handleError(err);
  // cod rulat după ce a fost salvat!
});

// sau în cazul în care introduci seturi mari de documente
Processor.insertMany([{ nume: 'Razor' }], function (err) {

});
```

Documentele nu vor fi create și în baza da date dacă nu există o legătură deschisă la baza de date.